@model List<VlammendVarkenBackend.Models.ViewModels.BestellingOverzichtViewModel>
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="nl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Overzicht Lopende Bestellingen</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />
</head>
<body class="bg-gray-50 flex items-center justify-center min-h-screen p-4 font-sans">

  <div class="w-full max-w-6xl bg-white rounded-xl shadow-lg p-6 md:p-8 space-y-8">
    <main class="overflow-x-auto border border-gray-200 rounded-lg">
      <table class="min-w-full bg-white">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tafel(s)</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tijd Geplaatst</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Aantal Gasten</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Attentie</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Bereidingstijd</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Timer</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Allergenen</th>
            <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actie</th>
          </tr>
        </thead>
        <tbody class="divide-y divide-gray-200 text-sm text-gray-700">
          @foreach (var item in Model)
          {
            <tr data-bestellingid="@item.BestellingId" data-bereidingstijd="@item.BereidingstijdMinuten">
              <td class="px-6 py-4 whitespace-nowrap font-semibold text-gray-800">
                @string.Join(", ", item.Tafelnummers)
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-gray-600">
                @item.Besteldatum.ToString("HH:mm")
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-gray-600">
                @item.AantalGasten gasten
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                @if (item.HeeftAttentie)
                {
                  <span class="inline-block px-2.5 py-1 text-xs font-semibold text-yellow-800 bg-yellow-100 rounded-full">Aanpassing</span>
                }
                else
                {
                  <span class="text-gray-500">-</span>
                }
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-gray-600">
                ~@item.BereidingstijdMinuten min
              </td>
              <td class="px-6 py-4 whitespace-nowrap font-mono tabular-nums text-red-600">
                <span class="timer-display">--:--</span>
                <div class="mt-1 flex gap-1">
                  <button class="start-btn bg-green-600 text-white px-2 py-1 rounded text-xs hover:bg-green-700 transition" style="display:none;">
                    Start
                  </button>
                  <button class="stop-btn bg-yellow-600 text-white px-2 py-1 rounded text-xs hover:bg-yellow-700 transition" style="display:none;">
                    Stop
                  </button>
                  <button class="delete-btn bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700 transition" style="display:none;">
                    Verwijder
                  </button>
                </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-gray-600">
                @if (item.Allergenen != null && item.Allergenen.Any())
                {
                  <span title="@string.Join(", ", item.Allergenen)" class="inline-flex gap-1 flex-wrap">
                    @foreach (var allergeen in item.Allergenen)
                    {
                      <span class="bg-red-100 text-red-800 px-2 py-0.5 rounded text-xs font-semibold" style="line-height:1;">
                        @allergeen
                      </span>
                    }
                  </span>
                }
                else
                {
                  <span class="text-gray-400">Geen</span>
                }
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-right">
                <a asp-controller="Bestellingen" asp-action="Personeel_Bestellingen_Details_Index" asp-route-bestellingId="@item.BestellingId"
                   class="bg-gray-800 text-white px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 hover:bg-gray-900 hover:scale-105">
                  Details
                </a>
              </td>
            </tr>
          }
        </tbody>
      </table>
    </main>
  </div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const rows = document.querySelectorAll('tbody tr[data-bestellingid]');

    rows.forEach(row => {
      const bestellingId = row.getAttribute('data-bestellingid');
      const bereidingstijdMinuten = parseInt(row.getAttribute('data-bereidingstijd'), 10);
      const timerDisplay = row.querySelector('.timer-display');
      const startBtn = row.querySelector('.start-btn');
      const stopBtn = row.querySelector('.stop-btn');
      const deleteBtn = row.querySelector('.delete-btn');

      const storageStartKey = 'bestellingTimerStart_' + bestellingId;
      const storageDurationKey = 'bestellingTimerDuration_' + bestellingId;

      const defaultDuration = bereidingstijdMinuten * 60;

      let startTimestamp = localStorage.getItem(storageStartKey);
      let storedDuration = localStorage.getItem(storageDurationKey);
      let totalDuration = storedDuration !== null ? parseInt(storedDuration, 10) : defaultDuration;
      let interval = null;
      let timerCompleted = false;

      function getSecondsLeft() {
        if (!startTimestamp) return totalDuration;
        const now = Date.now();
        const elapsed = Math.floor((now - parseInt(startTimestamp, 10)) / 1000);
        const left = totalDuration - elapsed;
        return left > 0 ? left : 0;
      }

      function updateTimerDisplay() {
        const secondsLeft = getSecondsLeft();

        if (secondsLeft === 0) {
          timerDisplay.textContent = "Klaar";
          row.classList.add('bg-green-200');
          if (interval) clearInterval(interval);
          if (!timerCompleted) {
            timerCompleted = true;
            localStorage.setItem(storageDurationKey, '0');
            localStorage.removeItem(storageStartKey);
            showStartStopButtons(false, true); // toon delete
          }
        } else {
          const minutes = Math.floor(secondsLeft / 60);
          const seconds = secondsLeft % 60;
          timerDisplay.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
          row.classList.remove('bg-yellow-200', 'bg-green-200');
        }
      }

      function showStartStopButtons(running, showDelete = false) {
        startBtn.style.display = running || showDelete ? 'none' : 'inline-block';
        stopBtn.style.display = running ? 'inline-block' : 'none';
        deleteBtn.style.display = showDelete ? 'inline-block' : 'none';
      }

      function startTimer() {
        if (interval) return;
        if (!startTimestamp) {
          startTimestamp = Date.now().toString();
          localStorage.setItem(storageStartKey, startTimestamp);
        }
        interval = setInterval(updateTimerDisplay, 1000);
        updateTimerDisplay();
        showStartStopButtons(true);
      }

      function stopTimer() {
        if (!interval) return;
        clearInterval(interval);
        interval = null;
        const secondsLeft = getSecondsLeft();
        totalDuration = secondsLeft;
        localStorage.setItem(storageDurationKey, totalDuration);
        localStorage.removeItem(storageStartKey);
        startTimestamp = null;
        updateTimerDisplay();
        showStartStopButtons(false);
      }

      deleteBtn.addEventListener('click', () => {
        row.remove();
        localStorage.removeItem(storageStartKey);
        localStorage.removeItem(storageDurationKey);
      });

      const secondsLeft = getSecondsLeft();
      if (startTimestamp && secondsLeft > 0) {
        showStartStopButtons(true);
        startTimer();
      } else if (secondsLeft === 0) {
        updateTimerDisplay();
        showStartStopButtons(false, true); // toon delete
      } else {
        updateTimerDisplay();
        showStartStopButtons(false);
      }

      startBtn.addEventListener('click', startTimer);
      stopBtn.addEventListener('click', stopTimer);
    });
  });

  document.addEventListener('DOMContentLoaded', () => {
    const tbody = document.querySelector('tbody');
    const rows = Array.from(tbody.querySelectorAll('tr[data-bestellingid]'));

    function isKlaar(row) {
      const timerDisplay = row.querySelector('.timer-display');
      return timerDisplay && timerDisplay.textContent.trim().toLowerCase() === 'klaar';
    }

    function sortRows() {
      const sorted = [...rows].sort((a, b) => {
        const aKlaar = isKlaar(a);
        const bKlaar = isKlaar(b);
        if (aKlaar === bKlaar) return 0;
        return aKlaar ? -1 : 1; // Klaar eerst
      });

      sorted.forEach(row => tbody.appendChild(row));
    }

    setTimeout(sortRows, 100);
  });
</script>

</body>
</html>
