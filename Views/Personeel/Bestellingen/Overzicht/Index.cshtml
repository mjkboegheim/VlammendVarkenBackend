@model List<VlammendVarkenBackend.Models.ViewModels.BestellingOverzichtViewModel>
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="nl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Overzicht Lopende Bestellingen</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />
</head>
<body class="bg-gray-50 flex items-center justify-center min-h-screen p-4 font-sans">

  <div class="w-full max-w-6xl bg-white rounded-xl shadow-lg p-6 md:p-8 space-y-8">
    <main class="overflow-x-auto border border-gray-200 rounded-lg">
      <table class="min-w-full bg-white">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tafel(s)</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tijd Geplaatst</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Aantal Gasten</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Attentie</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Bereidingstijd</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Timer</th>
            <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actie</th>
          </tr>
        </thead>
        <tbody class="divide-y divide-gray-200 text-sm text-gray-700">
          @foreach (var item in Model)
          {
            <tr data-bestellingid="@item.BestellingId" data-bereidingstijd="@item.BereidingstijdMinuten">
              <td class="px-6 py-4 whitespace-nowrap font-semibold text-gray-800">
                @string.Join(", ", item.Tafelnummers)
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-gray-600">
                @item.Besteldatum.ToString("HH:mm")
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-gray-600">
                @item.AantalGasten gasten
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                @if (item.HeeftAttentie)
                {
                  <span class="inline-block px-2.5 py-1 text-xs font-semibold text-yellow-800 bg-yellow-100 rounded-full">Aanpassing</span>
                }
                else
                {
                  <span class="text-gray-500">-</span>
                }
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-gray-600">
                ~@item.BereidingstijdMinuten min
              </td>
              <td class="px-6 py-4 whitespace-nowrap font-mono tabular-nums text-red-600">
                <span class="timer-display">--:--</span>
                <div class="mt-1 flex gap-1">
                  <button class="start-btn bg-green-600 text-white px-2 py-1 rounded text-xs hover:bg-green-700 transition" style="display:none;">
                    Start
                  </button>
                  <button class="stop-btn bg-yellow-600 text-white px-2 py-1 rounded text-xs hover:bg-yellow-700 transition" style="display:none;">
                    Stop
                  </button>
                </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-right">
                <a asp-controller="Bestellingen" asp-action="Personeel_Bestellingen_Details_Index" asp-route-bestellingId="@item.BestellingId"
                   class="bg-gray-800 text-white px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 hover:bg-gray-900 hover:scale-105">
                  Details
                </a>
              </td>
            </tr>
          }
        </tbody>
      </table>
    </main>
  </div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const rows = document.querySelectorAll('tbody tr[data-bestellingid]');

    rows.forEach(row => {
      const bestellingId = row.getAttribute('data-bestellingid');
      const bereidingstijdMinuten = parseInt(row.getAttribute('data-bereidingstijd'), 10);
      const timerDisplay = row.querySelector('.timer-display');
      const startBtn = row.querySelector('.start-btn');
      const stopBtn = row.querySelector('.stop-btn');

      // LocalStorage keys per bestelling
      const storageStartKey = 'bestellingTimerStart_' + bestellingId;
      const storageDurationKey = 'bestellingTimerDuration_' + bestellingId;

      // Default duur in seconden
      const defaultDuration = bereidingstijdMinuten * 60;

      // Haal opgeslagen starttijd en duur op
      let startTimestamp = localStorage.getItem(storageStartKey);
      let storedDuration = localStorage.getItem(storageDurationKey);
      let totalDuration = storedDuration !== null ? parseInt(storedDuration, 10) : null;

      // Alleen defaultDuration instellen als er geen geldige storedDuration is (null of NaN)
      if (totalDuration === null || isNaN(totalDuration)) {
        totalDuration = defaultDuration;
        localStorage.setItem(storageDurationKey, totalDuration);
      }

      let interval = null;

      function getSecondsLeft() {
        if (!startTimestamp) {
          return totalDuration;
        }
        const now = Date.now();
        const elapsed = Math.floor((now - parseInt(startTimestamp, 10)) / 1000);
        const left = totalDuration - elapsed;
        return left > 0 ? left : 0;
      }

      function updateTimerDisplay() {
        const secondsLeft = getSecondsLeft();

        if (secondsLeft === 0) {
          timerDisplay.textContent = "Klaar";
          row.classList.add('bg-green-200');
          clearInterval(interval);
          interval = null;

          localStorage.setItem(storageDurationKey, '0');
          localStorage.removeItem(storageStartKey);

          showStartStopButtons(false);
        } else {
          const minutes = Math.floor(secondsLeft / 60);
          const seconds = secondsLeft % 60;
          timerDisplay.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
          row.classList.remove('bg-yellow-200');
          row.classList.remove('bg-green-200');
        }
      }

      function showStartStopButtons(running) {
        if (running) {
          startBtn.style.display = 'none';
          stopBtn.style.display = 'inline-block';
        } else {
          startBtn.style.display = 'inline-block';
          stopBtn.style.display = 'none';
        }
      }

      function startTimer() {
        if (interval) return;

        if (!startTimestamp) {
          startTimestamp = Date.now().toString();
          localStorage.setItem(storageStartKey, startTimestamp);
        }

        interval = setInterval(() => {
          updateTimerDisplay();
        }, 1000);

        updateTimerDisplay();
        showStartStopButtons(true);
      }

      function stopTimer() {
        if (!interval) return;

        clearInterval(interval);
        interval = null;

        const secondsLeft = getSecondsLeft();
        totalDuration = secondsLeft;
        localStorage.setItem(storageDurationKey, totalDuration);
        localStorage.removeItem(storageStartKey);
        startTimestamp = null;

        updateTimerDisplay();
        showStartStopButtons(false);
      }

      // Init: toon timer en juiste knop (start/stop) bij laden pagina
      if (startTimestamp) {
        startTimer();
      } else {
        updateTimerDisplay();
        showStartStopButtons(false);
      }

      // Event listeners knoppen
      startBtn.addEventListener('click', () => {
        startTimer();
      });

      stopBtn.addEventListener('click', () => {
        stopTimer();
      });
    });
  });
</script>


</body>
</html>
