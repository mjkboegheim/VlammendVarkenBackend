@model VlammendVarkenBackend.Models.ViewModels.PersoneelBestellingDetailsViewModel

<!DOCTYPE html>
<html lang="nl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Details Lopende Bestellingen</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
</head>
<body class="bg-gray-50 flex items-center justify-center min-h-screen p-4 font-sans">
  <div class="w-full max-w-6xl bg-white rounded-xl shadow-lg p-6 md:p-8 space-y-8">

    <!-- Terug knop -->
    <a href="/personeel/bestellingen/overzicht/index"
       class="inline-flex items-center gap-2 bg-gray-100 hover:bg-gray-200 text-gray-700 text-sm font-medium px-4 py-2 rounded-lg shadow-sm transition-all duration-200">
      <span class="material-icons text-base">arrow_back</span>
      Terug naar overzicht
    </a>

    <main class="overflow-x-auto border border-gray-200 rounded-lg">
      <table class="min-w-full bg-white">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tafel(s)</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tijd</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Soort</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Gerecht</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Bijgerecht</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Groente</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Saus</th>
            <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Actie</th>
          </tr>
        </thead>
        <tbody class="divide-y divide-gray-200">
          @{
            var rowCount = Model.Gerechten.Count > 0 ? Model.Gerechten.Count : 1;
            bool eersteRij = true;
          }
          @foreach(var gerecht in Model.Gerechten)
          {
            <tr id="bestelling-rij" class="@(eersteRij ? "" : "bg-amber-50")">
              @if(eersteRij)
              {
                <td class="px-6 py-4 whitespace-nowrap align-top font-semibold text-gray-800" rowspan="@rowCount">
                  @(string.Join(", ", Model.Tafelnummers))
                </td>
                <td class="px-6 py-4 whitespace-nowrap align-top text-gray-600" rowspan="@rowCount">
                  @Model.Besteldatum.ToString("HH:mm")
                </td>
              }
              <td class="px-6 py-4 whitespace-nowrap">
                <span class="font-bold text-gray-700">@gerecht.Soort</span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">@gerecht.GerechtNaam</td>
              <td class="px-6 py-4 text-gray-500 whitespace-nowrap">@gerecht.BijgerechtNaam</td>
              <td class="px-6 py-4 text-gray-500 whitespace-nowrap">@gerecht.GroenteNaam</td>
              <td class="px-6 py-4 text-gray-500 whitespace-nowrap">@gerecht.SausNaam</td>

              @if(eersteRij)
              {
                <td class="px-6 py-4 whitespace-nowrap text-center align-middle" rowspan="@rowCount">
                  <div class="flex flex-col items-center justify-center h-full gap-2">
                    <p class="font-semibold">
                      Aftellen: <span id="aftelTijd" class="text-red-600 tabular-nums">--:--</span>
                    </p>
                    <button id="startTimerBtn" class="bg-green-600 text-white px-3 py-1.5 rounded-lg text-sm font-medium hover:bg-green-700 transition" style="display:none;">
                      Start Timer
                    </button>
                    <button id="stopTimerBtn" class="bg-yellow-600 text-white px-3 py-1.5 rounded-lg text-sm font-medium hover:bg-yellow-700 transition" style="display:none;">
                      Stop Timer
                    </button>
                    <button id="verhoogTimerBtn" class="bg-indigo-600 text-white px-3 py-1.5 rounded-lg text-sm font-medium hover:bg-indigo-700 transition">
                      Ophogen +15 min
                    </button>
                    <button id="verwijderBtn" class="bg-red-600 text-white px-3 py-1.5 rounded-lg text-sm font-medium hover:bg-red-700 transition mt-2" style="display:none;">
                      Verwijder
                    </button>
                  </div>
                </td>
              }
            </tr>
            eersteRij = false;
          }
        </tbody>
      </table>
    </main>
  </div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const aftelTijdElem = document.getElementById('aftelTijd');
    const verhoogBtn = document.getElementById('verhoogTimerBtn');
    const startBtn = document.getElementById('startTimerBtn');
    const stopBtn = document.getElementById('stopTimerBtn');
    const verwijderBtn = document.getElementById('verwijderBtn');

    const gerechtRijen = document.querySelectorAll('.bestelling-rij');

    const bestellingId = '@Model.BestellingId';
    const storageStartKey = 'bestellingTimerStart_' + bestellingId;
    const storageDurationKey = 'bestellingTimerDuration_' + bestellingId;

    const defaultDuration = @Model.BereidingstijdMinuten * 60;

    let startTimestamp = localStorage.getItem(storageStartKey);
    let totalDuration = parseInt(localStorage.getItem(storageDurationKey), 10);
    if ((!totalDuration && totalDuration !== 0) || isNaN(totalDuration)) {
      totalDuration = defaultDuration;
      localStorage.setItem(storageDurationKey, totalDuration);
    }

    let interval = null;

    function getSecondsLeft() {
      if (!startTimestamp) {
        return totalDuration;
      }
      const now = Date.now();
      const elapsed = Math.floor((now - parseInt(startTimestamp, 10)) / 1000);
      const left = totalDuration - elapsed;
      return left > 0 ? left : 0;
    }

    function updateTimerDisplay() {
      const secondsLeft = getSecondsLeft();

      if (secondsLeft === 0) {
        aftelTijdElem.textContent = 'Klaar';
        gerechtRijen.forEach(rij => rij.classList.add('bg-green-200'));
        clearInterval(interval);
        interval = null;

        localStorage.setItem(storageDurationKey, '0');
        localStorage.removeItem(storageStartKey);

        showStartStopButtons(false, false);
        verwijderBtn.style.display = 'inline-block';
      } else {
        const minutes = Math.floor(secondsLeft / 60);
        const seconds = secondsLeft % 60;
        aftelTijdElem.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
        gerechtRijen.forEach(rij => rij.classList.remove('bg-green-200'));

        verwijderBtn.style.display = 'none';
        showStartStopButtons(true, true);
      }
    }

    function showStartStopButtons(running, visible = true) {
      if (!visible) {
        startBtn.style.display = 'none';
        stopBtn.style.display = 'none';
      } else if (running) {
        startBtn.style.display = 'none';
        stopBtn.style.display = 'inline-block';
      } else {
        startBtn.style.display = 'inline-block';
        stopBtn.style.display = 'none';
      }
    }

    function startTimer() {
      if (interval) return;

      if (!startTimestamp) {
        startTimestamp = Date.now().toString();
        localStorage.setItem(storageStartKey, startTimestamp);
      }

      interval = setInterval(() => {
        updateTimerDisplay();
        if (getSecondsLeft() === 0) {
          clearInterval(interval);
          interval = null;
          showStartStopButtons(false, false);
          verwijderBtn.style.display = 'inline-block';
        }
      }, 1000);

      updateTimerDisplay();
      showStartStopButtons(true);
    }

    function stopTimer() {
      if (!interval) return;

      clearInterval(interval);
      interval = null;

      const secondsLeft = getSecondsLeft();
      totalDuration = secondsLeft;
      localStorage.setItem(storageDurationKey, totalDuration);
      localStorage.removeItem(storageStartKey);
      startTimestamp = null;

      updateTimerDisplay();
      showStartStopButtons(false);
    }

    verhoogBtn.addEventListener('click', () => {
      const secondsLeft = getSecondsLeft();
      totalDuration = secondsLeft + 15 * 60;
      localStorage.setItem(storageDurationKey, totalDuration);
      updateTimerDisplay();

      verwijderBtn.style.display = 'none';
    });

    startBtn.addEventListener('click', startTimer);
    stopBtn.addEventListener('click', stopTimer);

    verwijderBtn.addEventListener('click', () => {
      if (confirm('Weet je zeker dat je deze bestelling wilt verwijderen?')) {
        gerechtRijen.forEach(rij => rij.remove());
        localStorage.removeItem(storageStartKey);
        localStorage.removeItem(storageDurationKey);
      }
    });

    // Zorg ervoor dat de startknop altijd zichtbaar is als de timer nog niet is gestart
    const secondsLeft = getSecondsLeft();
    if (startTimestamp && secondsLeft > 0) {
      startTimer();  // Start de timer direct als deze al loopt
    } else if (secondsLeft === 0) {
      aftelTijdElem.textContent = 'Klaar';
      gerechtRijen.forEach(rij => rij.classList.add('bg-green-200'));
      showStartStopButtons(false, false);
      verwijderBtn.style.display = 'inline-block';
      localStorage.removeItem(storageStartKey);
      localStorage.setItem(storageDurationKey, '0');
    } else {
      updateTimerDisplay();
      showStartStopButtons(false, false);  // Begin zonder knoppen zichtbaar
    }

    // **Zorg ervoor dat de startknop zichtbaar is als de timer nog niet is gestart**
    if (!startTimestamp) {
      showStartStopButtons(false, true);  // Alleen de startknop zichtbaar maken
    }
  });
</script>

</body>
</html>
