@model VlammendVarkenBackend.Models.ViewModels.PersoneelBestellingDetailsViewModel

<!DOCTYPE html>
<html lang="nl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Details Lopende Bestellingen</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
</head>
<body class="bg-gray-50 flex items-center justify-center min-h-screen p-4 font-sans">
  <div class="w-full max-w-6xl bg-white rounded-xl shadow-lg p-6 md:p-8 space-y-8">

    <!-- Terug knop -->
    <a href="/personeel/bestellingen/overzicht/index"
       class="inline-flex items-center gap-2 bg-gray-100 hover:bg-gray-200 text-gray-700 text-sm font-medium px-4 py-2 rounded-lg shadow-sm transition-all duration-200">
      <span class="material-icons text-base">arrow_back</span>
      Terug naar overzicht
    </a>

    <main class="overflow-x-auto border border-gray-200 rounded-lg">
      <table class="min-w-full bg-white">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tafel(s)</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tijd</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Soort</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Gerecht</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Bijgerecht</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Groente</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Saus</th>
            <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Actie</th>
          </tr>
        </thead>
        <tbody class="divide-y divide-gray-200">
          @{
            var rowCount = Model.Gerechten.Count > 0 ? Model.Gerechten.Count : 1;
            bool eersteRij = true;
          }
          @foreach(var gerecht in Model.Gerechten)
          {
            <tr id="bestelling-rij" class="@(eersteRij ? "" : "bg-amber-50")">
              @if(eersteRij)
              {
                <td class="px-6 py-4 whitespace-nowrap align-top font-semibold text-gray-800" rowspan="@rowCount">
                  @(string.Join(", ", Model.Tafelnummers))
                </td>
                <td class="px-6 py-4 whitespace-nowrap align-top text-gray-600" rowspan="@rowCount">
                  @Model.Besteldatum.ToString("HH:mm")
                </td>
              }
              <td class="px-6 py-4 whitespace-nowrap">
                <span class="font-bold text-gray-700">@gerecht.Soort</span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">@gerecht.GerechtNaam</td>
              <td class="px-6 py-4 text-gray-500 whitespace-nowrap">@gerecht.BijgerechtNaam</td>
              <td class="px-6 py-4 text-gray-500 whitespace-nowrap">@gerecht.GroenteNaam</td>
              <td class="px-6 py-4 text-gray-500 whitespace-nowrap">@gerecht.SausNaam</td>

              @if(eersteRij)
              {
                <td class="px-6 py-4 whitespace-nowrap text-center align-middle" rowspan="@rowCount">
                  <div class="flex flex-col items-center justify-center h-full gap-2">
                    <p class="font-semibold">
                      Aftellen: <span id="aftelTijd" class="text-red-600 tabular-nums">--:--</span>
                    </p>
                    <button id="startTimerBtn" class="bg-green-600 text-white px-3 py-1.5 rounded-lg text-sm font-medium hover:bg-green-700 transition" style="display:none;">
                      Start Timer
                    </button>
                    <button id="stopTimerBtn" class="bg-yellow-600 text-white px-3 py-1.5 rounded-lg text-sm font-medium hover:bg-yellow-700 transition" style="display:none;">
                      Stop Timer
                    </button>
                    <button id="verhoogTimerBtn" class="bg-indigo-600 text-white px-3 py-1.5 rounded-lg text-sm font-medium hover:bg-indigo-700 transition">
                      Ophogen +15 min
                    </button>
                  </div>
                </td>
              }
            </tr>
            eersteRij = false;
          }
        </tbody>
      </table>
    </main>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const aftelTijdElem = document.getElementById('aftelTijd');
      const verhoogBtn = document.getElementById('verhoogTimerBtn');
      const startBtn = document.getElementById('startTimerBtn');
      const stopBtn = document.getElementById('stopTimerBtn');
      const rijElem = document.getElementById('bestelling-rij');

      const bestellingId = '@Model.BestellingId';
      const storageKey = 'bestellingTimer_' + bestellingId;

      let savedSeconds = localStorage.getItem(storageKey);
      let secondsLeft = savedSeconds !== null
        ? parseInt(savedSeconds, 10)
        : @Model.BereidingstijdMinuten * 60;

      let interval = null;

      function updateTimerDisplay() {
        let minutes = Math.floor(secondsLeft / 60);
        let seconds = secondsLeft % 60;
        aftelTijdElem.textContent = String(minutes).padStart(2, '0') + ':' + String(seconds).padStart(2, '0');
      }

      function showStartStopButtons(timerRunning) {
        if (timerRunning) {
          startBtn.style.display = 'none';
          stopBtn.style.display = 'inline-block';
        } else {
          startBtn.style.display = 'inline-block';
          stopBtn.style.display = 'none';
        }
      }

      function startTimer() {
        if (interval) return;

        interval = setInterval(() => {
          if (secondsLeft > 0) {
            secondsLeft--;
            updateTimerDisplay();
            localStorage.setItem(storageKey, secondsLeft.toString());
            rijElem.classList.remove('bg-yellow-200');
          } else {
            aftelTijdElem.textContent = '00:00';
            rijElem.classList.add('bg-yellow-200');
            clearInterval(interval);
            interval = null;
            localStorage.removeItem(storageKey);
            showStartStopButtons(false);
          }
        }, 1000);

        updateTimerDisplay();
        showStartStopButtons(true);
      }

      function stopTimer() {
        if (interval) {
          clearInterval(interval);
          interval = null;
          showStartStopButtons(false);
        }
      }

      // Start knop
      startBtn.addEventListener('click', () => {
        startTimer();
      });

      // Stop knop
      stopBtn.addEventListener('click', () => {
        stopTimer();
      });

      // Ophogen knop
      verhoogBtn.addEventListener('click', () => {
        secondsLeft += 15 * 60;
        updateTimerDisplay();
        localStorage.setItem(storageKey, secondsLeft.toString());

        if (!interval) {
          startTimer();
        }
      });

      // Init: toon timer en juiste knop (start of stop)
      if (interval) {
        showStartStopButtons(true);
      } else {
        showStartStopButtons(false);
      }

      updateTimerDisplay();
    });
  </script>
</body>
</html>
